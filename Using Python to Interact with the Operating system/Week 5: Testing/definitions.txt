Week 5 Testing:

software testing: The process of evaluating computer code to determine whether or not it does what it expects to do

manuel testing: for example, executing a script with different command line arguments to see how its behaviour changed

automatic testing: automate the process of checking if the returned value matches the expectations (--> test cases)

-----------------------------------------------------------------------------------------------------------------------------------------------------
UNIT TESTS

Unit tests: Verify that small, isolated parts of a program are correct 
import unittest

function_test.py:
from module import function (--> isolation)
import unittest

class TestFunction(unittest.TestCase):
  def test_basic(self):
    testcase = "lovelace, Ada"
    expected = "Ada Lovelace"
    self.assertEqual(function(testcase), expected)

Edge cases: Inputs that produce unexpected results, found at the extreme ends of the ranges of input our program works in
  def test_empty(self):
    testcase = ""
    expected = ""
    self.assertEqual(function(testcase), expected)
  
  def test_double_name(self):
    testcase = "Hopper, Grace M."
    expected = "Grace M. Hopper"
    self.assertEqual(function(testcase), expected)
  
  def test_one_name(self):
    testcase = "Voltaire"
    expected = "Voltaire"
    self.assertEqual(function(testcase), expected)

unittest.main()

-------------------------------------------------------------------------------------------------------------------------------------------------
OTHER TEST CONCEPTS 

White vs black box testing:

White-box testing (clear-box or transparent testing): Relies in the test creators knowledge of the software being tested to construct test cases

Black-box testing: awareness of what the program is supposed to do, but not how it does it
--> less likely to be biased by the code

integration test: interaction between different pieces of code in integrated environments are working as they supposed to
--> use test environment, for ex. interaction w data base,  create test database w test user and test data tables, without risking to ;odify the prod environment

smoke tests: find major bugs in code

Load tests: system behaves well when under significant load

Test suite: group of many kinds of test

test-driven development: creating test before writing code
1) writing a test
2) running it so it fails
3) adjust code

---------------------------------------------------------------------------------------------------------------------------------------------------
ERRORS AND EXCEPTIONS

Try-except constuct: the code in the except block is only executed if one of the instructions in the try block raises an error of the matching type
--> the exception bypasses the error

try:
  f=open(filename)
except OSError:
  return None

Raise error ourselves?
if minlen < 1
  raise ValueError("nlnl")

ValueError --> problem w one of the values of the parameters

assert type(username) == str, "username must be a string"
--> evaluate if a cond expression is true, otherwise Assertion error
--> ensure that variables contain the values and types they should


Testing for expected errors
def test_invalid_minlen(self):
  self.assertRaises(ValueError, validate_user, "user", -1)
